#ifndef SHADOW_RENDERER_3D_H
#define SHADOW_RENDERER_3D_H

#include "../../graphics/Renderer.h"
#include "FrustumRenderer3D.h"

namespace se::app {

	class ShadowRenderer3D : public graphics::Renderer
	{
	private:
		struct Cascade
		{
			/** USed for rendering the Cascade shadow */
			FrustumRenderer3D renderer;

			/** The percentage of the Camera ZFar used for calculating the
			 * ZFar of the Cascade */
			float zFarPerc;

			/** The AABB of camera frustum of the Cascade */
			glm::vec3 minAABB, maxAABB;
		};

	private:
		std::vector<Cascade> mCascades;

		glm::mat4 mLightViewMatrix;

		glm::mat4 mCameraInvViewProjectionMatrix;

		std::size_t mShadowResolution;

	public:
		/** Creates a new ShadowRenderer3D
		 *
		 * @param	name the name of the RenderNode
		 * @param	cascadesZFarPerc the percentage of the camera zFar used for
		 *			calculating the zFar of each cascade */
		ShadowRenderer3D(
			const std::string& name, const std::vector<float>& cascadesZFarPerc
		);

		/** Class destructor */
		virtual ~ShadowRenderer3D() = default;

		ShadowRenderer3D& updateLightViewMatrix(
			const glm::mat4& lightViewMatrix
		);

		ShadowRenderer3D& updateCameraFrustum(
			const glm::mat4& viewProjectionMatrix
		);

		ShadowRenderer3D& setShadowResolution(std::size_t shadowResolution);

		/** @copydoc graphics::Renderer::submit(
		 *	graphics::Renderable&, graphics::Pass&
		 * ) */
		virtual void submit(
			graphics::Renderable& renderable, graphics::Pass& pass
		) override;

		/** @copydoc graphics::Renderer::render() */
		virtual void render() override;
	private:
		void calculateCascadesAABBs();
	};

}

#endif		// SHADOW_RENDERER_3D_H
